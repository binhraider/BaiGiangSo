import os
import json
import time
import csv
import requests
import argparse
from dotenv import load_dotenv

# === CONFIG ===
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-lite:generateContent?key={GEMINI_API_KEY}"  # S·ª≠a model th√†nh gemini-1.5-flash (model h·ª£p l·ªá)

def parse_args():
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser(description="Generate Storyboard from JSON")
    parser.add_argument("--json", default="slides_with_text_temp.json", help="Path to input JSON")
    parser.add_argument("--output-json", default="storyboard.json", help="Path to output JSON")
    parser.add_argument("--output-csv", default="storyboard.csv", help="Path to output CSV")
    return parser.parse_args()

def generate_storyboard_elements_with_ai(lecture_text):
    """
    S·ª≠ d·ª•ng Gemini ƒë·ªÉ t·∫°o ra c√°c y·∫øu t·ªë storyboard m·ªôt c√°ch s√°ng t·∫°o.
    """
    if not GEMINI_API_KEY:
        print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY, s·ª≠ d·ª•ng logic m·∫∑c ƒë·ªãnh.")
        return {"action": "Gi·∫£ng vi√™n tr√¨nh b√†y", "graphics": "Hi·ªÉn th·ªã slide", "camera_angle": "Trung c·∫£nh"}

    prompt = f"""
    B·∫°n l√† m·ªôt ƒë·∫°o di·ªÖn video chuy√™n s·∫£n xu·∫•t c√°c b√†i gi·∫£ng e-learning cho tr·∫ª em. D·ª±a v√†o l·ªùi gi·∫£ng d∆∞·ªõi ƒë√¢y, h√£y ƒë·ªÅ xu·∫•t c√°c y·∫øu t·ªë cho storyboard theo ƒë·ªãnh d·∫°ng JSON.
    
    Y√äU C·∫¶U:
    - "action": M√¥ t·∫£ h√†nh ƒë·ªông c·ªßa gi·∫£ng vi√™n (v√≠ d·ª•: "c∆∞·ªùi t∆∞∆°i v√† ch·ªâ v√†o m√†n h√¨nh", "gi∆° 2 ng√≥n tay", "v·∫Ω m·ªôt h√¨nh tr√≤n l√™n b·∫£ng"). H√†nh ƒë·ªông ph·∫£i kh·ªõp v·ªõi l·ªùi gi·∫£ng.
    - "graphics": ƒê·ªÅ xu·∫•t c√°c y·∫øu t·ªë ƒë·ªì h·ªça c·∫ßn hi·ªÉn th·ªã tr√™n m√†n h√¨nh (v√≠ d·ª•: "hi·ªán ch·ªØ 'Ph√©p c·ªông'", "icon qu·∫£ t√°o bay v√†o", "s·ªë 5 ƒë∆∞·ª£c khoanh tr√≤n").
    - "camera_angle": ƒê·ªÅ xu·∫•t g√≥c m√°y (v√≠ d·ª•: "c·∫≠n c·∫£nh bi·ªÉu c·∫£m", "trung c·∫£nh th·∫•y tay", "to√†n c·∫£nh").

    L∆ØU √ù: Ch·ªâ tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t, kh√¥ng c√≥ gi·∫£i th√≠ch hay k√Ω t·ª± ``` n√†o kh√°c.
    
    L·ªúI GI·∫¢NG:
    "{lecture_text}"
    
    JSON OUTPUT:
    """

    headers = {"Content-Type": "application/json"}
    body = {
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": {
            "response_mime_type": "application/json",
        }
    }
    
    try:
        res = requests.post(GEMINI_URL, headers=headers, json=body, timeout=60)
        res.raise_for_status()
        storyboard_data = res.json()["candidates"][0]["content"]["parts"][0]["text"]
        ai_elements = json.loads(storyboard_data)
        
        # X·ª≠ l√Ω n·∫øu ai_elements l√† list (l·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n)
        if isinstance(ai_elements, list) and ai_elements:
            ai_elements = ai_elements[0]
        
        if not isinstance(ai_elements, dict):
            raise ValueError("Ph·∫£n h·ªìi t·ª´ Gemini kh√¥ng ph·∫£i dict h·ª£p l·ªá.")
        
        return ai_elements
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ªçi Gemini cho storyboard: {e}. S·ª≠ d·ª•ng logic m·∫∑c ƒë·ªãnh.")
        return {"action": "Gi·∫£ng vi√™n tr√¨nh b√†y", "graphics": "Hi·ªÉn th·ªã slide", "camera_angle": "Trung c·∫£nh"}


def generateStoryboard(json_path, output_json_path, output_csv_path):
    """Generate Storyboard from JSON and save as JSON/CSV."""
    if not os.path.exists(json_path):
        raise FileNotFoundError(f"File {json_path} kh√¥ng t·ªìn t·∫°i")
    
    try:
        with open(json_path, "r", encoding="utf-8") as f:
            slides = json.load(f)
    except json.JSONDecodeError as e:
        raise ValueError(f"File JSON kh√¥ng h·ª£p l·ªá: {e}")
    
    if not slides:
        raise ValueError("File JSON r·ªóng ho·∫∑c kh√¥ng ch·ª©a Slide")

    print("üìñ Generating Storyboard...")
    storyboard = []
    total_slides = len(slides)

    for i, slide in enumerate(slides):
        slide_num = slide.get("slide_number", i + 1)
        print(f"üñºÔ∏è  Processing Slide {slide_num}/{total_slides}: {slide.get('title', 'No Title')}")
        
        lecture = slide.get("generated_lecture", "")
        
        # FIX: Kh√¥ng c·∫ßn t√≠nh l·∫°i duration, ch·ªâ c·∫ßn ƒë·ªçc t·ª´ slide
        duration = slide.get("duration", 0)
        print(f"    - ‚è± Duration (from JSON): {duration}s")
        
        # N√ÇNG C·∫§P: G·ªçi AI ƒë·ªÉ t·∫°o storyboard
        if lecture:
            print("    - ü§ñ Calling AI Director for creative ideas...")
            ai_elements = generate_storyboard_elements_with_ai(lecture)
            slide["action"] = ai_elements.get("action", "Gi·∫£ng vi√™n tr√¨nh b√†y")
            slide["graphics"] = ai_elements.get("graphics", "Hi·ªÉn th·ªã slide")
            slide["camera_angle"] = ai_elements.get("camera_angle", "Trung c·∫£nh")
            time.sleep(10) # Th√™m ƒë·ªô tr·ªÖ ƒë·ªÉ tr√°nh l·ªói rate limit c·ªßa Gemini
        else:
            slide["action"] = "N/A"
            slide["graphics"] = "N/A"
            slide["camera_angle"] = "N/A"

        storyboard.append(slide)

    # Save as JSON
    with open(output_json_path, "w", encoding="utf-8") as f:
        json.dump(storyboard, f, ensure_ascii=False, indent=2)
    print(f"‚úÖ Saved Storyboard JSON to: {output_json_path}")

    # Save as CSV
    if storyboard:
        fieldnames = [
            "slide_number", "title", "generated_lecture", "audio_path", 
            "duration", "action", "graphics", "camera_angle"
        ]
        with open(output_csv_path, "w", encoding="utf-8", newline="") as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            for slide in storyboard:
                filtered_slide = {key: slide.get(key, "") for key in fieldnames}
                writer.writerow(filtered_slide)
        print(f"‚úÖ Saved Storyboard CSV to: {output_csv_path}")

if __name__ == "__main__":
    args = parse_args()
    generateStoryboard(args.json, args.output_json, args.output_csv)