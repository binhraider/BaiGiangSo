import requests
import os
import json
import time
from dotenv import load_dotenv
import base64
import cloudinary
import cloudinary.uploader

# T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# --- C·∫•u h√¨nh ---
D_ID_API_KEY = os.getenv("D_ID_API_KEY")
D_ID_TALK_URL = "https://api.d-id.com/talks"
STORYBOARD_FILE = "storyboard.json"
OUTPUT_FILE = "did_videos.json"
# üÜï Th∆∞ m·ª•c ƒë·ªÉ l∆∞u video t·∫£i v·ªÅ
VIDEO_OUTPUT_DIR = "videos"

# C·∫•u h√¨nh Cloudinary
cloudinary.config(
  cloud_name = os.getenv("CLOUDINARY_CLOUD_NAME"),
  api_key = os.getenv("CLOUDINARY_API_KEY"),
  api_secret = os.getenv("CLOUDINARY_API_SECRET"),
  secure = True
)

def upload_media_to_cloudinary(local_path, resource_type):
    """
    T·∫£i file ·∫£nh ho·∫∑c audio l√™n Cloudinary ƒë·ªÉ l·∫•y URL HTTPS c√¥ng khai.
    """
    if not os.path.exists(local_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {local_path}")
        return None
    try:
        print(f"‚òÅÔ∏è  ƒêang t·∫£i file {resource_type} l√™n Cloudinary: {local_path}...")
        response = cloudinary.uploader.upload(local_path, resource_type=resource_type)
        public_url = response.get('secure_url')
        if public_url:
            print(f"‚úÖ Upload th√†nh c√¥ng ({resource_type}): {public_url}")
            return public_url
        else:
            print(f"‚ùå L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c URL t·ª´ Cloudinary cho {resource_type}.")
            return None
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫£i file {resource_type} l√™n Cloudinary: {e}")
        return None

# ‚úÖ H√ÄM M·ªöI: T·ª± ƒë·ªông t·∫£i video v·ªÅ m√°y
def download_video_from_url(video_url, save_path):
    """
    T·∫£i file video t·ª´ m·ªôt URL v√† l∆∞u v√†o ƒë∆∞·ªùng d·∫´n c·ª•c b·ªô.
    """
    try:
        print(f"‚¨áÔ∏è  ƒêang t·∫£i video t·ª´: {video_url}...")
        res = requests.get(video_url, stream=True)
        res.raise_for_status()
        
        # T·∫°o th∆∞ m·ª•c n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i
        os.makedirs(os.path.dirname(save_path), exist_ok=True)
        
        with open(save_path, 'wb') as f:
            for chunk in res.iter_content(chunk_size=8192):
                f.write(chunk)
        print(f"‚úÖ Video ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {save_path}")
        return save_path
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫£i video: {e}")
        return None

def generate_did_video(photo_url, audio_url):
    """
    G·ª≠i y√™u c·∫ßu t·∫°o video ƒë·∫øn D-ID API.
    """
    api_key_with_colon = D_ID_API_KEY + ":"
    encoded_key = base64.b64encode(api_key_with_colon.encode('utf-8')).decode('utf-8')
    headers = {
        "accept": "application/json", "content-type": "application/json",
        "authorization": f"Basic {encoded_key}"
    }
    payload = {
        "source_url": photo_url,
        "script": { "type": "audio", "audio_url": audio_url },
        "config": { "fluent": "false", "result_format": "mp4" }
    }
    try:
        res = requests.post(D_ID_TALK_URL, json=payload, headers=headers)
        res.raise_for_status()
        talk_id = res.json().get("id")
        print(f"‚úÖ Talk ƒë√£ ƒë∆∞·ª£c g·ª≠i! ID: {talk_id}")
        return talk_id
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ªçi API t·∫°o talk: {e}")
        if hasattr(e, "response") and e.response is not None:
            print(f"üìÑ Chi ti·∫øt l·ªói t·ª´ server: {e.response.text}")
        return None

def get_talk_status(talk_id):
    """
    Ki·ªÉm tra tr·∫°ng th√°i v√† l·∫•y URL video.
    """
    api_key_with_colon = D_ID_API_KEY + ":"
    encoded_key = base64.b64encode(api_key_with_colon.encode('utf-8')).decode('utf-8')
    headers = { "accept": "application/json", "authorization": f"Basic {encoded_key}" }
    url = f"{D_ID_TALK_URL}/{talk_id}"
    for attempt in range(30):
        try:
            res = requests.get(url, headers=headers)
            res.raise_for_status()
            data = res.json()
            status = data.get("status")

            if status == "done":
                print(f"üéâ Video s·∫µn s√†ng: {data.get('result_url')}")
                return data.get("result_url")
            elif status == "error":
                print(f"‚ùå D-ID tr·∫£ v·ªÅ l·ªói: {data}")
                return None
            else:
                print(f"‚è≥ Tr·∫°ng th√°i: {status}. Ch·ªù th√™m 10s... (L·∫ßn {attempt + 1}/30)")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra status: {e}")
            return None
        time.sleep(10)
    print("‚ùå Qu√° th·ªùi gian ch·ªù video.")
    return None

def process_storyboard(local_photo_path, limit=5):
    """
    Quy tr√¨nh ch√≠nh: T·∫£i ·∫£nh, sau ƒë√≥ x·ª≠ l√Ω t·ª´ng slide v√† t·∫£i video k·∫øt qu·∫£.
    """
    public_photo_url = upload_media_to_cloudinary(local_photo_path, resource_type="image")
    if not public_photo_url:
        print("‚ùå D·ª´ng ch∆∞∆°ng tr√¨nh v√¨ kh√¥ng th·ªÉ t·∫£i ·∫£nh ƒë·∫°i di·ªán l√™n.")
        return
    try:
        with open(STORYBOARD_FILE, "r", encoding="utf-8") as f:
            slides = json.load(f)
    except FileNotFoundError:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file '{STORYBOARD_FILE}'.")
        return

    video_results = []
    for slide in slides[:limit]:
        slide_num = slide.get('slide_number', 'N/A')
        print(f"\n{'='*10} üé¨ Slide {slide_num} {'='*10}")
        local_audio_path = slide.get("audio_path")
        if not local_audio_path or not os.path.exists(local_audio_path):
            print(f"‚ö†Ô∏è B·ªè qua slide v√¨ kh√¥ng t√¨m th·∫•y file audio: '{local_audio_path}'")
            continue

        public_audio_url = upload_media_to_cloudinary(local_audio_path, resource_type="video")
        if not public_audio_url: continue

        talk_id = generate_did_video(public_photo_url, public_audio_url)
        if not talk_id: continue
        
        time.sleep(5)
        video_url = get_talk_status(talk_id)

        if video_url:
            # ‚úÖ C·∫¨P NH·∫¨T: T·∫£i video v·ªÅ m√°y
            # Video s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o th∆∞ m·ª•c "videos" v·ªõi t√™n slide_1.mp4, slide_2.mp4...
            local_video_path = download_video_from_url(video_url, os.path.join(VIDEO_OUTPUT_DIR, f"slide_{slide_num}.mp4"))
            
            # L∆∞u c·∫£ 2 ƒë∆∞·ªùng link v√†o file k·∫øt qu·∫£
            video_results.append({
                "slide_number": slide_num,
                "title": slide.get("title"),
                "video_url_online": video_url,
                "local_video_path": local_video_path
            })
    
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        json.dump(video_results, f, ensure_ascii=False, indent=2)
    print(f"\n‚úÖ Ho√†n t·∫•t! {len(video_results)} video ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω v√† t·∫£i v·ªÅ. K·∫øt qu·∫£ l∆∞u t·∫°i: {OUTPUT_FILE}")

if __name__ == "__main__":
    local_photo_path_for_avatar = "C:/Users/Admin/Downloads/Test_BaiGiangSo/Hinh-anh-trai-dep-Viet-Nam.jpg"
    
    if not all([D_ID_API_KEY, os.getenv("CLOUDINARY_CLOUD_NAME"), os.getenv("CLOUDINARY_API_KEY"), os.getenv("CLOUDINARY_API_SECRET")]):
        print("‚ùå L·ªói: Vui l√≤ng thi·∫øt l·∫≠p ƒë·∫ßy ƒë·ªß D_ID_API_KEY v√† c√°c bi·∫øn CLOUDINARY trong file .env")
    else:
        process_storyboard(local_photo_path_for_avatar, limit=5)