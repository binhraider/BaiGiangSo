import os
from moviepy.editor import VideoFileClip, ImageClip, CompositeVideoClip

# --- C·∫•u h√¨nh ---

# Th∆∞ m·ª•c ch·ª©a c√°c video avatar ƒë√£ t·∫°o (v√≠ d·ª•: video_001_slide_1.mp4, video_002_slide_2.mp4)
AVATAR_VIDEOS_DIR = "videos"

# Th∆∞ m·ª•c ch·ª©a c√°c ·∫£nh slide ƒë√£ xu·∫•t t·ª´ PowerPoint (v√≠ d·ª•: Slide1.JPG, Slide2.JPG)
SLIDES_IMAGES_DIR = "slides_images"

# Th∆∞ m·ª•c ƒë·ªÉ l∆∞u c√°c video th√†nh ph·∫©m
FINAL_VIDEOS_DIR = "final_videos"

# --- T√πy ch·ªânh giao di·ªán ---

# K√≠ch th∆∞·ªõc video cu·ªëi c√πng (chi·ªÅu r·ªông, chi·ªÅu cao)
# 1920x1080 (Full HD) l√† m·ªôt l·ª±a ch·ªçn t·ªët
FINAL_VIDEO_SIZE = (1920, 1080)

# K√≠ch th∆∞·ªõc c·ªßa video avatar (chi·ªÅu r·ªông, chi·ªÅu cao)
AVATAR_WIDTH = 480  # Chi·ªÅu r·ªông kho·∫£ng 25% video Full HD

# V·ªã tr√≠ c·ªßa video avatar tr√™n slide (c√≥ th·ªÉ l√† "left", "right", "center" v√† "top", "bottom", "center")
AVATAR_POSITION = ("left", "bottom")

# Kho·∫£ng c√°ch l·ªÅ (t√≠nh b·∫±ng pixel)
MARGIN = 40

def merge_avatar_and_slide(slide_image_path, avatar_video_path, output_path):
    """
    Gh√©p m·ªôt ·∫£nh slide v√† m·ªôt video avatar th√†nh video cu·ªëi c√πng.
    """
    try:
        print(f"üé¨ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω: {os.path.basename(avatar_video_path)}")

        # 1. T·∫£i video avatar v√† ·∫£nh slide
        avatar_clip = VideoFileClip(avatar_video_path)
        
        # 2. Chu·∫©n h√≥a k√≠ch th∆∞·ªõc v√† ƒë·∫∑t v·ªã tr√≠ cho avatar
        # Thay ƒë·ªïi k√≠ch th∆∞·ªõc avatar theo chi·ªÅu r·ªông ƒë√£ ƒë·ªãnh, chi·ªÅu cao s·∫Ω t·ª± ƒëi·ªÅu ch·ªânh
        resized_avatar_clip = avatar_clip.resize(width=AVATAR_WIDTH)
        
        # ƒê·∫∑t v·ªã tr√≠ cho avatar c√≥ t√≠nh c·∫£ l·ªÅ
        resized_avatar_clip = resized_avatar_clip.set_position(
            (
                FINAL_VIDEO_SIZE[0] - resized_avatar_clip.w - MARGIN, # V·ªã tr√≠ X (t·ª´ tr√°i qua)
                FINAL_VIDEO_SIZE[1] - resized_avatar_clip.h - MARGIN  # V·ªã tr√≠ Y (t·ª´ tr√™n xu·ªëng)
            )
        )

        # 3. T·∫°o n·ªÅn slide
        # T·∫£i ·∫£nh slide, ƒë·∫∑t th·ªùi l∆∞·ª£ng b·∫±ng v·ªõi video avatar, v√† thay ƒë·ªïi k√≠ch th∆∞·ªõc cho v·ª´a video cu·ªëi c√πng
        slide_background = (
            ImageClip(slide_image_path)
            .set_duration(resized_avatar_clip.duration)
            .resize(FINAL_VIDEO_SIZE)
        )

        # 4. Gh√©p l·∫°i v·ªõi nhau (ƒë·∫∑t avatar l√™n tr√™n n·ªÅn)
        # ‚úÖ ƒê√É S·ª¨A L·ªñI LOGIC: `slide_background` l√†m n·ªÅn, `resized_avatar_clip` ·ªü l·ªõp tr√™n
        final_clip = CompositeVideoClip([slide_background, resized_avatar_clip])

        # 5. Ghi file video cu·ªëi c√πng
        # codec="libx264" v√† audio_codec="aac" l√† c√°c l·ª±a ch·ªçn ph·ªï bi·∫øn, t∆∞∆°ng th√≠ch cao
        final_clip.write_videofile(output_path, codec="libx264", audio_codec="aac")
        
        print(f"‚úÖ Ho√†n th√†nh: {output_path}")

    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω file {os.path.basename(avatar_video_path)}: {e}")

def process_all_videos():
    """
    T√¨m v√† x·ª≠ l√Ω t·∫•t c·∫£ c√°c c·∫∑p slide/video t∆∞∆°ng ·ª©ng.
    """
    # T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra n·∫øu ch∆∞a c√≥
    os.makedirs(FINAL_VIDEOS_DIR, exist_ok=True)
    
    try:
        # L·∫•y danh s√°ch c√°c video avatar v√† s·∫Øp x·∫øp theo th·ª© t·ª±
        avatar_videos = sorted(
            [f for f in os.listdir(AVATAR_VIDEOS_DIR) if f.endswith(".mp4")],
            key=lambda x: int(x.split('_')[-1].split('.')[0])  # ‚úÖ S·ª¨A: video_001_slide_1.mp4 -> l·∫•y 1 t·ª´ slide_1
        )
    except FileNotFoundError:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c '{AVATAR_VIDEOS_DIR}'. H√£y ch·∫Øc ch·∫Øn b·∫°n ƒë√£ ch·∫°y script t·∫°o video tr∆∞·ªõc ƒë√≥.")
        return
    except (IndexError, ValueError):
        print("‚ùå L·ªói: T√™n file trong th∆∞ m·ª•c 'videos' kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng 'video_001_slide_1.mp4'.")  # ‚úÖ S·ª¨A: Message
        return

    for video_filename in avatar_videos:
        # T√¨m ·∫£nh slide t∆∞∆°ng ·ª©ng (v√≠ d·ª•: video "video_001_slide_1.mp4" s·∫Ω kh·ªõp v·ªõi ·∫£nh "Slide1.JPG")
        try:
            slide_number = video_filename.split('_')[-1].split('.')[0]  # ‚úÖ S·ª¨A: video_001_slide_1.mp4 -> l·∫•y 1 t·ª´ slide_1
        except (IndexError, ValueError):
            print(f"‚ö†Ô∏è T√™n file kh√¥ng h·ª£p l·ªá '{video_filename}'. B·ªè qua.")
            continue

        # Th·ª≠ c·∫£ 2 ƒë·ªãnh d·∫°ng .PNG v√† .JPG ph·ªï bi·∫øn m√† PowerPoint hay xu·∫•t ra
        slide_image_name_jpg = f"Slide{slide_number}.JPG" # PowerPoint th∆∞·ªùng xu·∫•t ra ƒëu√¥i .JPG
        slide_image_name_png = f"Slide{slide_number}.PNG"
        
        slide_image_path_jpg = os.path.join(SLIDES_IMAGES_DIR, slide_image_name_jpg)
        slide_image_path_png = os.path.join(SLIDES_IMAGES_DIR, slide_image_name_png)

        if os.path.exists(slide_image_path_jpg):
            slide_image_path = slide_image_path_jpg
        elif os.path.exists(slide_image_path_png):
            slide_image_path = slide_image_path_png
        else:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh cho video '{video_filename}' (ƒë√£ t√¨m ki·∫øm {slide_image_name_jpg} v√† {slide_image_name_png}). B·ªè qua.")
            continue
            
        avatar_video_path = os.path.join(AVATAR_VIDEOS_DIR, video_filename)
        output_video_path = os.path.join(FINAL_VIDEOS_DIR, f"final_{video_filename}")
        
        merge_avatar_and_slide(slide_image_path, avatar_video_path, output_video_path)

if __name__ == "__main__":
    process_all_videos()